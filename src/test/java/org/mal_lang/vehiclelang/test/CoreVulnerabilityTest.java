package org.mal_lang.vehiclelang.test;

import core.Asset;
import core.AttackStep;
import core.Attacker;
import core.Defense;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

public class CoreVulnerabilityTest {

   @Test
   public void testVulnerability() {

      Service userland = new Service("Userland");
      OperatingSystem kernel = new OperatingSystem("Kernel");
      VehicularIdentity root = new VehicularIdentity("RootAccount");
      VehicularIdentity user = new VehicularIdentity("UserAccount");
      SoftwareVulnerability privEsc = new SoftwareVulnerability("PrivEsc");

      kernel.addExecutionPrivIAMs(root);
      userland.addHighPrivAppIAMs(user);
      userland.addHostApp(kernel);
      kernel.addVulnerabilities(privEsc);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(user.assume);
      attacker.addAttackPoint(userland.localConnect);

      attacker.attack();

      userland.fullAccess.assertCompromisedInstantaneously();
      kernel.localConnect.assertCompromisedInstantaneously();
      privEsc.exploitWithEffort.assertCompromisedWithEffort();
      root.assume.assertCompromisedInstantaneously();
      kernel.fullAccess.assertCompromisedInstantaneously();
   }

   @Test
   public void testSoftware() {
      Machine machine = new Machine("Machine");
      Service software = new Service("Software");
      SoftwareVulnerability vulnerability = new SoftwareVulnerability("Vulnerability");

      machine.addMachineExecutedApps(software);
      software.addVulnerabilities(vulnerability);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(machine.fullAccess); // Changed it to access because cannot connect to software without machine.fullAccess
      
      attacker.attack();

      vulnerability.exploit.assertCompromisedInstantaneously();
    }

   @AfterEach
   public void deleteModel() {
      Asset.allAssets.clear();
      AttackStep.allAttackSteps.clear();
      Defense.allDefenses.clear();
   }

}
