package org.mal_lang.vehiclelang.test;

import core.Asset;
import core.AttackStep;
import core.Attacker;
import core.Defense;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

public class AdvancedVulnerabilityTest {

    @Test
    public void testVulnerabilityOnUDS() {
      // Testing vulnerability on an UDS service.
      /*
                      |- PrivEsc(Vulnerability)
      Root(VehicularIdentity)---|
           |   _______|  Data
           |  |           |
      UDS_Service <---> Ecu#1 <---> vNet(CAN)
           |                         | |
           |                         | |---> Ecu#2 <---> Sensor/Actuator
      UDS_Dataflow <-----------------                    
      */
      // TARGET: udsService.fullAccess & dataflow.respond ENTRY_POINT: UDS_Service.networkConnectUninspected
      System.out.println("### " + Thread.currentThread().getStackTrace()[1].getMethodName()); // Printing the test's name

      ECU ecu1 = new ECU ("ECU#1", false, false, true, true); // Enabled operation mode and message confliction protection
      ECU ecu2 = new ECU ("ECU#2", false, false, true, true);
      SensorOrActuator phyMachine = new SensorOrActuator ("Sensor/Actuator");
      CANNetwork vNet = new CANNetwork ("CAN");
      ConnectionOrientedDataflow dataflow = new ConnectionOrientedDataflow ("UDS_Dataflow");
      UDSService udsService = new UDSService ("UDS_Service");
      VehicularIdentity root = new VehicularIdentity ("Root");
      SoftwareVulnerability privEsc = new SoftwareVulnerability ("PrivEsc");
      Data data = new Data ("Data");

      ecu1.addMachineExecutedApps(udsService);
      ecu1.addVehiclenetworks(vNet);
      ecu1.addHostedData(data);
      ecu2.addVehiclenetworks(vNet);
      ecu2.addSensorsOrActuators(phyMachine);
      udsService.addExecutionPrivIAMs(root);
      udsService.addVulnerabilities(privEsc);
      //privEsc.addPrivileges(root);
      udsService.addDataflows(dataflow);
      vNet.addDataflows(dataflow);

      Attacker attacker = new Attacker();
      attacker.addAttackPoint(udsService.networkConnectUninspected);
      attacker.attack();

      privEsc.exploit.assertCompromisedInstantaneously();
      // root.assume.assertUncompromised();
      root.assume.assertCompromisedInstantaneously();
      udsService.fullAccess.assertCompromisedInstantaneously();
      ecu1.connect.assertCompromisedInstantaneously();
      data.attemptRead.assertCompromisedInstantaneously();
      dataflow.respond.assertCompromisedInstantaneously();

      vNet.accessNetworkLayer.assertUncompromised();
      ecu2.connect.assertUncompromised();
   }

    @AfterEach
    public void deleteModel() {
        Asset.allAssets.clear();
        AttackStep.allAttackSteps.clear();
        Defense.allDefenses.clear();
   }

}
